/*******************************************************************************
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************/
plugins {
    id 'application'
    id 'com.jfrog.bintray' version '1.7.3'
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '2.0.0'
}

version = '0.1.0'
project.ext.NIFI_VERSION='1.7.0-SNAPSHOT'
description = "A project to create a stub/mock environment for testing NiFi processors"
group = 'mattyb149'
status = 'RELEASE'
project.ext.apiKey = System.getenv('BINTRAY_API_KEY') ?: System.getProperty('BINTRAY_API_KEY')

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}


dependencies {
    compile "org.apache.nifi:nifi-api:${project.ext.NIFI_VERSION}"
    compile "org.apache.nifi:nifi-mock:${project.ext.NIFI_VERSION}"
    compile "org.apache.nifi:nifi-nar-utils:${project.ext.NIFI_VERSION}"
    compile "org.apache.nifi:nifi-framework-nar-utils:${project.ext.NIFI_VERSION}"
    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'org.eclipse.jetty.toolchain:jetty-schemas:3.1'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    //compile 'ch.qos.logback:jcl-over-slf4j:1.2.3'
    compile 'org.slf4j:jcl-over-slf4j:1.7.25'
    compile 'org.slf4j:jul-to-slf4j:1.7.25'
    compile 'org.slf4j:log4j-over-slf4j:1.7.25'
    compile 'org.slf4j:slf4j-api'
    compile 'commons-io:commons-io:2.5'
    testCompile 'junit:junit:4.12'
    compile 'junit:junit:4.12'
    runtime 'org.slf4j:slf4j-log4j12:1.7.25'
    runtime "org.apache.nifi:nifi-framework-api:${project.ext.NIFI_VERSION}"
    runtime "org.apache.nifi:nifi-properties:${project.ext.NIFI_VERSION}"
    runtime "org.apache.nifi:nifi-runtime:${project.ext.NIFI_VERSION}"
}

mainClassName = 'nifi.Runner'

test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
    }
    forkEvery = 1
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            if (plugins.hasPlugin('war')) {
                from components.web
            } else {
                from components.java
            }

            artifact sourcesJar
            artifact javadocJar
            artifact shadowJar
        }
    }
}


bintray {
    user = System.getProperty('BINTRAY_USER') ?: 'mattyb149'
    key = project.ext.apiKey
    //configurations = ['default']
    publications = ['mavenJava']
    filesSpec {
        from 'files'
        into 'standalone_files/level1'
        rename '(.+)\\.(.+)', '$1-suffix.$2'
    }

    dryRun = false
    pkg {
        repo = 'maven'
        userOrg = group
        name = project.name
        desc = project.description
        websiteUrl = 'https://github.com/mattyb149/nifi-processor-tester'
        issueTrackerUrl = 'https://github.com/mattyb149/nifi-processor-tester/issues'
        vcsUrl = 'https://github.com/mattyb149/nifi-processor-tester.git'
        licenses = ['Apache-2.0']
        labels = ['apache', 'nifi', 'groovy']
        attributes = ['plat': ['linux', 'osx']]
        publicDownloadNumbers = true
        version {
            vcsTag = project.version
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.2.1"
}
